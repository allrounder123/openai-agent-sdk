---pydantic class matter alot kunke agr m chah rhi hu email address or pura context bhi data class or pydantic class se bna skty hn
---async programming se ham parallel processing krwa skty hn its mean ky ek sth 5 6 ya 50 functions bhi ham chla skty hn async.gather ky funtion 
se kunke yh library bht important h usy ham bht sary functions ek sth chla skty hn
---In AI, Markdown is a lightweight markup language that uses plain text formatting to structure data for both human and machine readability.
---Dynamic instruction in AI refers to giving AI systems flexible rules that change in real-time based on context, user input, or other variables,
rather than following a single, fixed instruction.
---Context management in AI is the process of supplying an AI agent with the relevant data it needs to perform a task, while strategically managing the limited space of 
its "context window" to prevent performance issues.
---error handling: input or output guardrils ki trf jarha h , tool ya function fail hogya us condition m kya hoga
---Pydantic models in AI are used to provide structure, validation, and type safety to the outputs of large language models (LLMs). Pydantic AI is a framework that leverages
Pydantic's data validation to turn messy, unstructured LLM responses into structured, reliable data for use in applications.
This approach simplifies building complex AI agents by allowing them to interact with domain-specific data, call external tools, and produce consistent, validated outputs. 
---Chain of of thought (CoT) prompting is a technique that enhances large language models' reasoning abilities by instructing them to break down complex problems into smaller, sequential steps
before providing a final answer.(reasoning krrha hoga hr step per kunke kisi model m reasoning ni hoti to us m COT kaam ata h jis m ham steps m kaam break down krty hn ky isko asy kro phr asy 
kro is trh
---markdown: square bracket m text likhty hn round bracket m link likhty hn yh hyperlink lgany ka tareeka h, The basic syntax to add an image in 
Markdown is: `![Alt text](image_url)`. For local images, use a local path or relative path.
---llm se bt krny ky tareekay ko kehty hn prompt engineering
--prompt kehty hn sawal krny ko or engineering of prompt mtlb ky prompt kese design kryn ky acha output mily, prompt likthy hn ham or us m changes krty rhty hn iteration perform krty rhty hn
jb tk ky desire output na mily to is engineering or changes krny ko prompt engineering kehty hn.
---GPT-4.1 prompting guide cookbook: context jo h one million token jo h wo ek query m process hoskta h . tool calling ko bht improve krdia h ky jb tool ko cl krty thy to jo kehty thy ky 
email send kro to wo attendance send krdeta tha to wo function ghlti se cl krdeta tha to ab problem yh h ky tool calling ka jo phly schema bnaty thy uske andr kch guidelines inho ne di ky agr
is guideline ko istemal krtyhuy ky ham jese do chizain krty haina ky tool ko kb istemal krna h yh system prompt m btadety hn  or tool kya kya kaam krta h usko kese istemal krskty hn uski kya 
exampels hn wo sari chizainham tool schema m btadety hn unho ne yh chez differentiate krdia ky example kb use krna h kya kya example per wo istemal hoskta h usky input output kya hongy wo
tool schema m btado or isi trhkb cl krna h kis sequence se cl krna h cl krny se phly kya krna h wo apky system prompt m h yh do batain inho ne btai, persistence mtlb jo conversation ham krrhy
hn jb tk koi task complete ni hota to wo persistence rhy yh memory ky andr apny loop ky andr wo yd rkhny ki koshish krta h to inho ne persistence bnany ki bhi koshish ki with the help of
prompt engineering. or COT ki badolat jo reasoning ki power h ky konsi chez kb istemal krni h isko bhi explain krny ki koshish ki h enhance krny ki koshish ki h.
---purany waly llm 1 million token ko process ni krty thy but gpt-4.1 waly llm m long context h yh 1 million ko proces krskty hn, coding or instruction following ko bhi improve kia h is m.

---AGENTIC WORKFLOW:GPT-4.1 is a great place to build agentic workflows.(mtlb ham jitny bhi agentic workflow ki chizain istemal krrhy hn jese openai agent ya kkoi bhi third party framework 
bnany jese langgraph un sbko agr backend per yh gpt4.1 wala llm dedain to yh sbse best h)
An agentic workflow is a process where AI agents execute a complex task autonomously, making decisions and taking actions with minimal human intervention. Unlike traditional
automation that follows fixed rules, these workflows use AI agents that can reason, adapt to real-time changes, and collaborate with humans to achieve goals more efficiently. 
-------SWE-bench verified:koi bhi repository ky issue, bug ya request ko automatically manage krna."SWE-bench Verified" means a set of real-world software engineering problems, 
sourced from actual GitHub issues, that have been human-validated to be solvable. It is a benchmark used to test and evaluate the capabilities of AI coding agents, particularly 
their ability to understand code, apply fixes, and autonomously validate their solutions in a single attempt, with no hints or scaffolding. 


---SYSTEM PROMPT REMINDERS:This explains three key system prompt reminders that improve GPT-4.1‚Äôs performance in agentic workflows (like coding or multi-step reasoning).

1. Persistence:(iteration m kam krrhy hn ky koi tool to cl ni krna ya kisi or agent se to help ni leni is trh different loops m kam krke user ky task ko complpete krengy )
Tell the model to keep working until the task is fully solved before returning control, ensuring it doesn‚Äôt stop too early.(jo bhi chizain horhi hn workflow m usy yad rkho tool calling,
function call kia handsoff kia or koi bhi chez istemal krrhy hn usy yad rkhega)
example:You are an agent - please keep going until the user‚Äôs query is completely resolved, before ending your turn and yielding back to the user.
Only terminate your turn when you are sure that the problem is solved.(is m please keep going wali line ka mtlb ky jo krrhy usy yd rkho or tbhi terminate krna tb problem solve ho .)

2. Tool-calling:
Instruct the model to use tools (like file reading or code inspection) when unsure, instead of guessing answers.(right time per right tool call krna
example:If you are not sure about file content or codebase structure pertaining to the user‚Äôs request, use your tools to read files and gather the relevant 
information: do NOT guess or make up an answer.(is trh wo khudse khud guess ni krega simple kehdia agr yh ni ata to simple toolcl krke file read krke information dedo
is trh wrong way m ni jyga hallucination ni krega)

3. Planning (optional):(planning ka mtlb chain of thoughts ky koi sawal kia to phly usko smjhengy phr apni knowledge se match krengy phr kch missing h to tool cl krengy us tool
ka purany information per kya asar hoga kese relate krega phr roadmap bnakr jawab dengy jo ky user ki need h ek perfect answer)
(reasoning to kch llm hoty hn but ab usy ek path dedngy to zyada bhtr hoga to uske liye COT ya planning zrori h lekin yh gpt4.1 non-reasoning h)
Ask the model to plan and reflect before and after tool calls, promoting thoughtful, step-by-step reasoning instead of blindly executing tasks.
example:You MUST plan extensively before each function call, and reflect extensively on the outcomes of the previous function calls. DO NOT do this entire process by making function calls only,
as this can impair your ability to solve the problem and think insightfully.

These three reminders help shift GPT-4.1 from a chatbot mode to a more independent, problem-solving agent, improving performance (by about 20% in internal tests).
This means GPT-4.1 performs much better when given clear system prompts that include the three reminders: persistence, tool-calling, and planning.
In the agentic setting (where the model acts like an autonomous problem-solver instead of a passive chatbot), GPT-4.1 follows both user instructions and system rules very carefully.
By adding those three reminders:
It keeps working until the problem is solved (persistence),
Uses tools correctly instead of guessing (tool-calling), and
Thinks and plans each step carefully (planning).
Doing this improved their internal benchmark performance (SWE-bench Verified) by about 20%, proving that these instructions make GPT-4.1 behave more like an independent, proactive 
agent rather than just responding to messages like a chatbot.(55% m se 20% inho ne srf tbhi achieve krlia jb yh teen chizain ki)
(planning ki ky kese solve hoga yh task yh tool cl krna phr uske bd yh tool cl krna or dusry ka phly per kyaa impact parhega yh bhi dekhna is trh acha prompt hota h in teen chizon se)

----------TOOL CALLS-----------
Developers must use the API‚Äôs tools field (the built-in method) instead of adding tool info manually into the prompt.(normally ham function bnaty thy or decorater lgadety thy or function
ki sari detail ham system prompt m likhrhy hoty thy to isko imporve krke ab jo hamary pas tool description ki field hoti h tool field hoti h usy tools pass krty hn instead of adding
details in system prompt jb tool description m detail add ki to SWE-bench verified 2% increased hua
GPT-4.1 has improved training for handling tools automatically.
Older versions weren‚Äôt as good at understanding how to call tools or interpret tool responses.
üîπ ‚ÄúWe encourage developers to exclusively use the tools field‚Ä¶ rather than manually injecting tool descriptions‚Ä¶‚Äù
‚û° When using the OpenAI API, there‚Äôs a proper place called the tools field where you define all available tools.
Some developers used to paste tool details (like name, purpose, and parameters) directly into the system prompt ‚Äî that‚Äôs no longer recommended.
You should let the API handle tool definitions automatically.
üîπ ‚ÄúDevelopers should name tools clearly to indicate their purpose‚Ä¶‚Äù
‚û° Always give tools clear names that describe what they do.
Example:
‚ùå Bad name: tool1
‚úÖ Good name: search_web or generate_chart
üîπ ‚ÄúSimilarly, for each tool param, lean on good naming and descriptions‚Ä¶‚Äù
‚û° For every parameter (input) your tool accepts, give it:
A meaningful name (e.g., query, file_path)
A short explanation (e.g., ‚ÄúThe keyword to search for on the web‚Äù)
This ensures GPT-4.1 uses the parameters correctly.
üîπ ‚ÄúIf your tool is particularly complicated‚Ä¶ create an # Examples section in your system prompt‚Ä¶‚Äù
‚û° If the tool is complex, instead of stuffing long examples into the description, create a separate Examples section in your system prompt.
This helps GPT-4.1 understand how and when to call the tool ‚Äî without cluttering the description.
üîπ ‚ÄúYou can use ‚ÄòGenerate Anything‚Äô in the Prompt Playground‚Ä¶‚Äù
‚û° In the OpenAI Prompt Playground, there‚Äôs a ‚ÄúGenerate Anything‚Äù feature that can help you auto-generate example tool definitions ‚Äî a quick way to start writing clean tool setups.
üîπ ‚ÄúProviding examples can be helpful to indicate when to use tools‚Ä¶‚Äù
‚û° Example usage helps GPT-4.1 know:
When it should use a tool
Whether it needs to include user input in the call
Which parameters are suitable for different cases
üîπ ‚ÄúAdd a clear, detailed description in the ‚Äòdescription‚Äô field of the tool.‚Äù
‚û° Each tool has a description field. Write a short, precise explanation of what the tool does so GPT-4.1 knows when and how to use it.
üîπ ‚ÄúThis is the best way to minimize errors and ensure the model remains in distribution‚Ä¶‚Äù
‚û° Using the correct method (the tools field) helps:
Avoid errors (since the model reads tools in the expected format)
Keep the model ‚Äúin distribution‚Äù, meaning it behaves the way it was trained ‚Äî not confused by custom or unusual prompt structures.
üîπ ‚ÄúWe observed a 2% increase in SWE-bench Verified pass rate‚Ä¶‚Äù
‚û° When they tested both methods, using API-defined tools made GPT-4.1 perform 2% better on a programming benchmark called SWE-bench Verified, which measures accuracy on coding tasks.
‚úÖ In summary:
Define tools properly using the API‚Äôs tools field, not in your prompt.
Give each tool clear names, concise descriptions, and well-labeled parameters.
If tools are complex, add an # Examples section for clarity.
This makes GPT-4.1 use tools more accurately, safely, and effectively.


üîπ ‚ÄúPrompting-Induced Planning & Chain-of-Thought‚Äù
This title means that a developer can cause GPT-4.1 to plan and think step-by-step just through prompting ‚Äî by writing special instructions in the prompt.
‚ÄúChain-of-thought‚Äù refers to the model‚Äôs reasoning process ‚Äî a series of logical steps it follows to reach an answer.

üîπ ‚ÄúAs mentioned already, developers can optionally prompt agents built with GPT-4.1 to plan and reflect between tool calls, instead of silently calling tools in an unbroken sequence.‚Äù
This means:
Developers who create AI agents using GPT-4.1 can choose to make the model plan and reflect between each action or tool use.
Normally, GPT-4.1 might just run tools one after another automatically (for example, calling a search tool, then a code tool, then a file tool) without explaining what it‚Äôs doing.
But with the right prompt, developers can make GPT-4.1 pause, explain its reasoning, and reflect on what happened before taking the next step.
In short ‚Äî instead of acting like a robot that executes tasks, GPT-4.1 can be made to act like a human who plans each move carefully.

üîπ ‚ÄúGPT-4.1 is not a reasoning model - meaning that it does not produce an internal chain of thought before answering -‚Äù
This means GPT-4.1 does not naturally think silently in the background.
It doesn‚Äôt generate hidden reasoning steps or mental calculations that you can‚Äôt see.
It just reads the input and produces an output directly.
In other words, it doesn‚Äôt have an internal ‚Äúthought process‚Äù like humans or reasoning models (which might generate invisible intermediate steps before answering).

üîπ ‚Äúbut in the prompt, a developer can induce the model to produce an explicit, step-by-step plan by using any variant of the Planning prompt component shown above.‚Äù
Even though GPT-4.1 doesn‚Äôt think internally, developers can make it show its thinking through prompting.
‚ÄúInduce‚Äù means to cause or encourage something to happen.
‚ÄúExplicit‚Äù means clearly written out or visible.
So, by adding a Planning instruction in the prompt (for example: ‚ÄúPlease plan your steps carefully before solving this task‚Äù), developers can make GPT-4.1 write a visible,
step-by-step plan before completing the task.
This helps the model structure its reasoning clearly instead of jumping straight to an answer.

üîπ ‚ÄúThis can be thought of as the model ‚Äòthinking out loud.‚Äô‚Äù
This phrase means that when GPT-4.1 writes out its step-by-step plan, it‚Äôs like it‚Äôs showing you its thoughts ‚Äî just as a person might speak their thought process aloud.
It‚Äôs not actually ‚Äúthinking‚Äù like a human, but it‚Äôs simulating the process by explaining what it‚Äôs going to do.

üîπ ‚ÄúIn our experimentation with the SWE-bench Verified agentic task, inducing explicit planning increased the pass rate by 4%.‚Äù
This means OpenAI tested this idea using a benchmark called SWE-bench Verified ‚Äî a dataset that measures how well AI agents solve software engineering (coding) problems.
They found that when GPT-4.1 was prompted to plan explicitly (write its step-by-step thoughts), it performed 4% better ‚Äî meaning it solved more tasks correctly.
So, prompting GPT-4.1 to plan and reflect improves accuracy and reasoning quality.

‚úÖ In summary:
GPT-4.1 doesn‚Äôt naturally have hidden reasoning (no internal chain of thought), but developers can prompt it to ‚Äúthink out loud‚Äù ‚Äî planning and reflecting step-by-step between
tool uses. This method, called prompting-induced planning, helps it solve problems more effectively ‚Äî increasing accuracy by 4% in experiments.

----non reasoning mtlb reinforcement learning ky tareeky se train ni kia gya jo reasoning model hn un m time ki cost h wo hr chez per reasoning krty hn lekin non reasoning m 
sidha sawal kia model train hua ya hua va h to wo simple jawab dedega mtlb jo training hui h us per jawab dedega gpt-4.1 normal agent h  generative ai llm h nonn reasoning to isy 
reasoing power dena chahty hn jo ky bht extensive level per hoti thi costly hoti thi to ab usy prompt engineering ki madad se reasoning krwa skty hn 


üß† 1. Reasoning vs Non-Reasoning Models in AI
Reasoning Models
These models are specifically trained to think step-by-step before giving an answer.
They create an internal ‚Äúchain of thought‚Äù ‚Äî meaning they reason through the problem internally, then provide the result.
They are better for complex logical tasks, like solving math problems, writing code, or multi-step reasoning (planning, cause-and-effect, etc.).
Example: Some versions of GPT-4 Turbo (reasoning models) are designed for tasks that require deep analysis or multi-step problem-solving.

üß© Example:
Q: If you have 3 apples and give away 1, how many are left?
A reasoning model will think internally: ‚Äú3 - 1 = 2‚Äù ‚Üí then answer ‚Äú2.‚Äù

Non-Reasoning Models
These models don‚Äôt have an internal reasoning process ‚Äî they generate answers directly from their training and the given prompt.
They can still perform well, but don‚Äôt explicitly ‚Äúthink‚Äù through each step unless you make them do it in the prompt.
Example: GPT-4.1 is a non-reasoning model. It can plan and reflect if you ask it to (through prompting), but it doesn‚Äôt automatically reason internally.

üß© Example:
Q: If you have 3 apples and give away 1, how many are left?
A non-reasoning model just knows the answer ‚Äú2‚Äù from memory ‚Äî it doesn‚Äôt consciously think ‚Äú3 - 1 = 2.‚Äù

‚öôÔ∏è 2. Dynamic Instructions
Dynamic Instructions are a feature in AI systems that allow real-time, flexible guidance during conversations or workflows.
They change or adapt the model‚Äôs behavior depending on the situation or context.
Instead of using fixed system prompts (which never change), dynamic instructions can update automatically based on:
The user‚Äôs input
The current task
The conversation‚Äôs progress

üß© Example:
You might set a dynamic instruction like:
‚ÄúIf the user uploads a code file, switch to code analysis mode.‚Äù
Or:
‚ÄúIf the conversation becomes too long, summarize key points before continuing.‚Äù
So, dynamic instructions make AI more adaptive, context-aware, and responsive ‚Äî almost like it can ‚Äúshift gears‚Äù depending on what‚Äôs happening.

-----------What is a Context Window in AI?
A context window is the maximum amount of text (tokens) an AI model like GPT can ‚Äúsee,‚Äù ‚Äúremember,‚Äù and use at one time to generate a response.
It‚Äôs basically the model‚Äôs short-term memory for a single conversation or request.

üß† How It Works
When you chat with an AI, everything you and the model say gets turned into tokens (small pieces of words).
The model reads these tokens to understand the situation and generate the next part of the answer.
The context window decides how many tokens (words) the model can keep in mind at once.
If the total conversation exceeds the limit, older parts get ‚Äúforgotten‚Äù or cut off ‚Äî the model can no longer access them.

üî¢ Example
Let‚Äôs say:
GPT-4.1 has a 1 million token context window (very large).
You write a huge book or give it thousands of pages of code ‚Äî it can still read, remember, and reason over all of it in one go.
Older models had smaller context windows (like 8k or 32k tokens), meaning they could only handle a few pages at a time.

--------------------Context Window:
The maximum amount of text the AI can read, remember, and use at one time.
üß© Example: GPT-4.1 can handle up to 1 million tokens.

Token:
A small piece of text ‚Äî it can be a word or part of a word.
üß© Example: The word ‚ÄúHello‚Äù counts as 1 token.

If the Limit Is Exceeded:
The model forgets older parts of the conversation or text.
üß© Example: Earlier chat messages get cut off when the limit is reached.

----üí° Why It Matters
A large context window means the AI can:
Understand long documents, books, or codebases
Keep track of long conversations
Answer complex questions using many sources at once



---------------------------------------------------------------MARKDOWN-------------------------------------------------------
---markdown standard format ha
markup language mtlb yh koi program ni krti koi decision ni leti bs jo text hamy nzr arha h usko mark krke obold italic formt krna picture lgana table bnana jese word per krty hn smny to
bs text ko click krke bold ko daba dety hn but backend per jo km hota h wo markdown hota h
----Markup Language
Definition: A markup language is used to structure, format, and display text.
Purpose: It ‚Äúmarks up‚Äù text with tags to tell computers how to display or process it.
Examples:
HTML (HyperText Markup Language) ‚Üí Used for web pages.
XML (Extensible Markup Language) ‚Üí Used for storing and transporting data.
Example Syntax (HTML):
<h1>Hello World</h1>
<p>This is a paragraph.</p>

‚úçÔ∏è Markdown Language
Definition: Markdown is a lightweight markup language created for easy text formatting using simple symbols.
Purpose: To write formatted text that‚Äôs easy to read in plain text and can convert to HTML.
Commonly used in: README files, documentation, and blogging platforms like GitHub or Reddit.
Example Syntax (Markdown):
# Hello World
This is a **bold** word and *italic* word.

----------
üîç Main Differences between Markup Language and Markdown

Syntax:
Markup uses tags like <h1> or <p>.
Markdown uses symbols like #, **, or *.

Complexity:
Markup is more complex and detailed.
Markdown is very simple and easy to learn.

Output:
Markup produces structured webpages (e.g., HTML documents).
Markdown converts to HTML or styled text.

Readability:
Markup is harder to read in its raw form.
Markdown is easy to read even without rendering.

-------------üëâ All Markdown is a type of markup, but not all markup is Markdown.

--markdown html m bhi convert hojata h agr backend per markdown use kryn or markdown or html markup language h dono web designing keliye use hoti hn
---makrdown text ki formatting keliye use hota h
---gpt-4.1 ko specially tool calling keliye markdown per train kia h phly llms ko markdown per train ni krty thy ab krty hn to jb ham input achy se format m mrkdown m dengy to llm bhi
usy bhtr understand krega or achy format m jawab dega.

--markdown text ki language h jisy ham text ko format krty hn or yh useful isliye h kunke ham agr sb kch ek document bnarhy wo sb ek hi size ek hi color ek hi paragraph m likhty rhengy
to yh parhny waly keliye mushkil hoga to ham markdown m bullet points bnaty hn heading ko bold krty hn link ko color krty hn main heading sbse bari sub heading choti kch chizain bracket 
m is trh formating krty hn takay easily understandable hojaye.

----Here‚Äôs why Markdown is important üëá

Simplicity:
It‚Äôs easy to learn and write ‚Äî no complex tags like HTML.

Readability:
Text remains clear and readable even without formatting applied.

Portability:
Works across many platforms (GitHub, Reddit, Notion, etc.).

Conversion:
Can be easily converted into HTML, PDF, or other formats.

Efficiency:
Helps write formatted content quickly using minimal syntax.

Version Control Friendly:
Since it‚Äôs plain text, tools like Git can easily track changes.

Used in Documentation:
Commonly used for README files, blogs, and software documentation.

-----vs code ya cursor per bhi markdown paste krke jo bhi syntax h uska usy ctrl+shift+v krke preview krskty hn,google collab per bhi markdown place krskty hn or teesra documentation m b
bhi krskty hn jese github m readme jo hot ha us file m agr # hello likhty hn or phr whin preview ka button hota h usy click krty hn to hello ky sth hash h to wo main heading hogi to wo
preview m hash hat jana or heading bn jyga hello bold or bara hojyga is trh preview krskty yh teen practical example h
----jese index.html m ham kaam krty hn or web pe wo show hota h heading ya bold wagaira ya table isi trh readme.md ki jo file h md mtlb markdown to wo khud hi main file ki documentation
m convert hojati h

--vs code m ya cursro m jakr folder bna kr kisi bhi naam se us m readme.md ki file bnao phr us :
# heading level 1
## heading level 2
### heading level 3
#### heading level 4

----yh chaar likho ya nichy level 5 or 6 bhi krskty hn 6 level tk jaskty hn agr 7 hash dalogy to wo normal text hi consider hoga preview m change  ni hoga 
jitny hash hongy utna font chota rhega
or phr ctrl+shift+v click kro ya right click krke preview ko dabao to phr preview hoke alg alg size m likha ayga jo hashes ky agay likha h
---ek to hash se heading bnti h dusra yh ky kisi test ky nichy ek = ka sign daldain to wo heading level 1 hota or agr single - yh dalain to wo heading level 2 hoti.
--agr #heading 1 krengy to yh asa hi rhega yh prview m change ni hoga kunke yh ghlt syntax h to hamy syntax follow krna h ky jhn space h whn dalni zrori h
Heading level 1
=
(yh sbse bari heading hogi)

Heading level 2
-
(yh usy choti heading hoti)

(jb preview krty hn to srf level 1 or level 2 ky nichy horizontal line ajati h by default but baqi 4 level m ni ati mtlb difference bnaya h ky main headings ky nichy lines ajyngi.

---srf "=" "-" or "#" se hi headings bnti hn uske ilawa + * ^ kch bhi use krlo wo normal text hi rhega.

"_" underscore se line draw hoti h 2 "__" se kch ni hota wo normal hi rhega lekin jese hi "___" 3 underscore dalengy to wo line bn jygi puri line 

----Heading Best Practices
‚úÖ  Do this	:(hash ky bd space dena h tbhi heading bnegi)
# Here's a Heading

‚ùå  Don't do this:
#Here's a Heading

‚úÖ  Do this	
Try to put a blank line before...

# Heading

...and after a heading.

‚ùå  Don't do this
Without blank lines, this might not look right.
# Heading
Don't do this!

---paragraph means jo text chlta jarha h jese hi enter krengy mtlb do lines ky beech lines agai to whin paragraph khtm hogya

---------------------Paragraphs:
To create paragraphs, use a blank line to separate one or more lines of text.

Markdown:
I really like using Markdown.I think I'll use it to format all of my documents from now on.(yh ek paragraph bnega or html m <p></p> is p tag se paragraph bnta ha.)
(isy jb ham vs per paste krengy or previewkrengy to yh ek paragph hoga paragraph normally likh skty markdown m bs blank line agai to whn paragraph khtm hoga.

----2 lines hn unke beech extra line h to wo do paragraph consider kiye jyngy. agr do lines ky beech m extra line ni h to wo ek paragraph bn jyga yh markdown m hota h lekin agr 
<p> ky sth asa kren ky do lines ky beech extra line na ho wo tb bhi 2 paragraph hi consider krega


--------MARKDOWN----------
----
I really like using Markdown.
I think I'll use it to format all of my documents from now on.(ab yh dono lines single paragraph hi hongi)

----
I really like using Markdown.

I think I'll use it to format all of my documents from now on.(ab yh do alg alg paragraph hongy)

----------HTML------------
<p>I really like using Markdown.</p>
<p>I think I'll use it to format all of my documents from now on.</p>(ab bhi yh do paragraph hi hn bhaly koi line na ho)


----------PARAGRAPH BEST PRACTICE--------------
‚úÖ  Do this
Don't put tabs or spaces in front of your paragraphs.

Keep lines left-aligned like this.


‚ùå  Don't do this
    This can result in unexpected formatting problems.

  Don't add tabs or spaces in front of paragraphs.


-----line breaks------:To create a line break or new line (<br>), end a line with two or more spaces, and then type return.
Markdown:
This is the first line.(next line per agaye to new line bn gai or agr beech m extra line chordi to wo 2 paragraph hojyngy)  
And this is the second line.

HTML:
<p>This is the first line.<br>(paragraph m <br> se next line per ajata ha agr kch paragraph ky andr next line per krna h to)
And this is the second line.</p>

output of both html and markdown is:
This is the first line.
And this is the second line.

------line break best practice--------(enter or <br> is best "\" or spaces are not too good)
1.Trailing whitespace (two spaces) can be used for line breaks in most Markdown apps.
2.It‚Äôs controversial because trailing spaces are hard to see and may be added accidentally.
3.A better alternative is using the HTML <br> tag for clear line breaks.
4.For best compatibility, use either two spaces or the <br> tag at the end of a line.
5.Using a backslash (\) for line breaks is not recommended ‚Äî not all Markdown apps support it.
6.Some markup languages automatically create line breaks when you press Enter, but this is not standard Markdown behavior.

‚úÖ  Do this	
First line with two spaces after.   (yhn per do spaces hn to nichy wali line next m chali jygi but yh nzr ni ayngy to kch bhi hoskta ghlti se likhdy koi tbhi <br> tag use krty dono krskty
And the next line.

First line with the HTML tag after.<br>
And the next line.


‚ùå  Don't do this
First line with a backslash after.\(yh krna recommended ni h)
And the next line.

First line with nothing after.(spaces ni dalengy or nichy krke dusri line dal dengy tb bhi yh ek paragraph hi rhega next line ni hogi)
And the next line.

------------------------Bold---------------------
To bold text, add two asterisks or underscores before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters.
 
            Markdown                                                     	HTML	                                 
I just love **bold text**. (bold text bold hokr ajyga)     	I just love <strong>bold text</strong>.         	
I just love __bold text__. (bold text bold hokr ajyga)      I just love <strong>bold text</strong>.         
Love**is**bold	(is bold hokr ajyga)                         Love<strong>is</strong>bold	   


-------------------------Bold Best Practices
Markdown applications don‚Äôt agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to bold the middle of a word for emphasis.

‚úÖ  Do this	              ‚ùåDon't do this:
Love**is**bold	            Love__is__bold


-----------------------Italic: (thora terha krke jo likha ata)
To italicize text, add one asterisk or underscore before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters.

                     Markdown	                                                         HTML	(html m <em> tag se italic hota h)
Italicized text is the *cat's meow*.(cats meow bold hokr ajyga)      	Italicized text is the <em>cat's meow</em>.	
Italicized text is the _cat's meow_.(cats meow bold hokr ajyga)      	Italicized text is the <em>cat's meow</em>.	
A*cat*meow(cat bold hokr ajyga)                                               	A<em>cat</em>meow

---------------------Italic Best Practices
Markdown applications don‚Äôt agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to italicize the middle of a word for emphasis.

‚úÖ  Do this	        ‚ùå  Don't do this
A*cat*meow	             A_cat_meow


-------------summary------
Love ***is*** bold(teen stearic bold+italic keliye)
Love **is** bold(2 stearic bold keliye)
Love *is* bold(1 stearic italic keliye)
Love*is*bold(1 stearic italic keliye)---->loveisbold(is m "is" italic hi ayga)
Love _is_ bold(single undersocre italic keliye)
Love_is_bold   ------->love_is_bold(is m "is" italic ni hoga underscore m space deni parti)
Love __is__ bold(double underscore bold keliye)
Love__is__bold(space ni hoga to ab yh bold bhi ni hoga simple text ajana)---->Love__is__bold
Love ___is___ bold(triple underscore italic+bold keliye)
Love___is___bold(ab yh bold+italic ni hoga)---------------->Love___is___bold(output yhi simple text ajana
Love ___is____ bold(ab is m ek trf 4 hn ek trf 3 hn to iska output---->Love is_ bold(yh ayga ek underscore agay extra ajana)(is bold+italic hoga hi)
Love ***is**** bold(ab is m yh italic+bold to hojana but kunke 4 * hn to ek agay extra lgna , output---->Love is* bold(is bold+italic hoga hi)
This text is __*really important*__.(really important bold+italic to hoga "*__"kunke ek * italic keliye lgaya or do __ underscore bold keliye lgaya hbut best 
practice *** stearic hi h bold+italic keliye)


----------------Blockquotes---------
To create a blockquote, add a ">" in front of a paragraph.

> Dorothy followed her through many of the beautiful rooms in her castle.
(iska output yh hoga ky paragraph ya line ky shuru m horizontal bold line ajygi jo btygi yh blockquote h)

---------Blockquotes with Multiple Paragraphs
Blockquotes can contain multiple paragraphs. Add a > on the blank lines between the paragraphs.

> Dorothy followed her through many of the beautiful rooms in her castle.
>
> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.(ab yh teeno lines quote hojyngi or inke shuru  horizontal moti bold line ajani or yh
ek block quote hoga)

--------------Nested Blockquotes
Blockquotes can be nested. Add a >> in front of the paragraph you want to nest.

> Dorothy followed her through many of the beautiful rooms in her castle.
>
>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.(ab is m hoga yh ky phly yh teen lines bary horizontal m aygi lekin jo third line h
jis m >> h to uske pas ek apna horizontal bold line bhi hogi mtlb ek puri teeno per or uske andr teesri per ek alg bhi hogi)

------------ab nested or chaiye to or bhi hongy:
>>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.(teen hongy)
>>>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.(4 hongy)
>>>>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.
>>>>>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.(6 bhi hongy or usy zyada bhi but 2 tk sai rhengy)

-------------------Blockquotes with Other Elements
Blockquotes can contain other Markdown formatted elements. Not all elements can be used ‚Äî you‚Äôll need to experiment to see which ones work.

> #### The quarterly results look great!(4 hash mtlb heading ka level 4 hoga blockquotes m)
>
> - Revenue was off the chart.(hiphen ky sign se bullets bnti hn to yh do bullets hongi)
> - Profits were higher than ever.
>
>  *Everything* is going according to **plan**.(ab is m everything italic hoga or plan bold hoga)

-----------Blockquotes Best Practices
For compatibility, put blank lines before and after blockquotes.

‚úÖ  Do this	
Try to put a blank line before...

> This is a blockquote

...and after a blockquote.	(shuru or akhir m blank line dedo blockquote ky takay sbse diffrerent dikhay mix na ho conjusted na ho)

‚ùå  Don't do this
Without blank lines, this might not look right.
> This is a blockquote
Don't do this!


-----------------------Lists---------------------------
You can organize items into ordered and unordered lists.

--------------------Ordered Lists
To create an ordered list, add line items with numbers followed by periods. The numbers don‚Äôt have to be in numerical order, but the list should start with the number one.

Markdown:
1. First item(1. ky bd space dena zrori h wrna nichy waly sary 1. wali line m hi ajyngy)
2. Second item(2. ky bd space dena zrori h wrna nichy waly sary 2. wali line m hi ajyngy isi trh 3 or 4 ky bd bhi line dena ha)
3. Third item
4. Fourth item	
 
output:
1.First item
2.Second item
3.Third item
4.Fourth item

Markdown:
1. First item(agr shuru m 1. dala ha or baqi bhaly nichy sequence ghlt h tb bhi wo isi 1 2 3 hi krega linewise)
1. Second item
1. Third item
1. Fourth item

output:
1.First item
2.Second item
3.Third item
4.Fourth item

Markdown:
1. First item(numbering alg alg dengy but 1. se shuru ki h tb bhi wo 1 2 3 hi consider krega or agr sbse phly 2 hua to 2 3 4 krega 3 hua first per to 3 4 5 krega is trh but sequence hoga)
8. Second item
3. Third item
5. Fourth item

output:
1.First item
2.Second item
3.Third item
4.Fourth item

Markdown:
1. First item
2. Second item
3. Third item
    1. Indented item
    2. Indented item
4. Fourth item

output:
1.First item
2.Second item
3.Third item
    1.Indented item
    2.Indented item
4.Fourth item


----------------------Ordered List Best Practices-------------------
CommonMark and a few other lightweight markup languages let you use a parenthesis ()) as a delimiter (e.g., 1) First item), but not all Markdown applications support this,
so it isn‚Äôt a great option from a compatibility perspective. For compatibility, use periods only.

‚úÖ  Do this	                
1. First item
2. Second item

‚ùå  Don't do this:(bracket ni lgega)
1) First item
2) Second item


-------------------------Unordered Lists-------------------------
To create an unordered list, add dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.

Markdown:(- yh lgany se output m round black color se fill huy vy circle ajany
- First item
- Second item
- Third item
- Fourth item

output:(sbke shuru m round black color ky circle ajayngy yhn show ni horhy but preview se hongy)
First item
Second item
Third item
Fourth item

Markdown:(stearic ky sign se bhi same output ayga or + se bhi wohi output ayga jo - hiphen se aya tha round black small circle)
* First item
* Second item
* Third item
* Fourth item

+ First item
+ Second item
+ Third item
+ Fourth item


Markdown:
- First item
- Second item
- Third item
    - Indented item
    - Indented item
- Fourth item

output:(jo first second third or fourth iteem hn unke pas wohi black rounde circle ayga lekin jo do indented item hn unka circle transparent ayga without black color)
First item
Second item
Third item
     Indented item
     Indented item
 Fourth item

Markdown:
- First item
- Second item
- Third item
    - Indented item
        - nested indented item
- Fourth item

output:(jo first second third or fourth iteem hn unke pas wohi black rounde circle ayga lekin jo  indented item hn uska circle transparent ayga without black color or jo nested indented
item h uska square ayga black color ka)
First item
Second item
Third item
      Indented item
        Indented item
Fourth item

















